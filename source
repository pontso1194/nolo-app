// Nolo - Voice-First Maternal Support App (Open Source Stack)
// Built with React Native (Expo), using open-source STT, TTS, and LLMs

import React, { useState } from 'react';
import {
  View,
  Text,
  Button,
  TouchableOpacity,
  ActivityIndicator,
  StyleSheet,
  SafeAreaView,
} from 'react-native';
import * as FileSystem from 'expo-file-system';
import { Audio } from 'expo-av';
import { Ionicons } from '@expo/vector-icons';

export default function App() {
  const [recording, setRecording] = useState(null);
  const [transcription, setTranscription] = useState('');
  const [response, setResponse] = useState('');
  const [audioUri, setAudioUri] = useState(null);
  const [loading, setLoading] = useState(false);

  const startRecording = async () => {
    try {
      const { status } = await Audio.requestPermissionsAsync();
      if (status !== 'granted') return;

      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      const newRecording = new Audio.Recording();
      await newRecording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);
      await newRecording.startAsync();
      setRecording(newRecording);
    } catch (err) {
      console.error('Failed to start recording', err);
    }
  };

  const stopRecording = async () => {
    try {
      setLoading(true);
      await recording.stopAndUnloadAsync();
      const uri = recording.getURI();
      setRecording(null);
      await handleUpload(uri);
    } catch (err) {
      console.error('Failed to stop recording', err);
      setLoading(false);
    }
  };

  const handleUpload = async (uri) => {
    try {
      const file = await FileSystem.readAsStringAsync(uri, {
        encoding: FileSystem.EncodingType.Base64,
      });

      const whisperResponse = await fetch('http://localhost:8000/transcribe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ audio: file }),
      });
      const whisperJson = await whisperResponse.json();
      const text = whisperJson.text || '';
      setTranscription(text);

      const llmResponse = await fetch('http://localhost:5000/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt: text }),
      });
      const llmJson = await llmResponse.json();
      const reply = llmJson.reply || '';
      setResponse(reply);

      const ttsResponse = await fetch('http://localhost:5002/tts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: reply }),
      });
      const ttsJson = await ttsResponse.json();
      const audio_url = ttsJson.audio_url || '';
      setAudioUri(audio_url);
    } catch (err) {
      console.error('Error during upload and processing:', err);
    } finally {
      setLoading(false);
    }
  };

  const playAudio = async () => {
    try {
      const { sound } = await Audio.Sound.createAsync({ uri: audioUri });
      await sound.playAsync();
    } catch (err) {
      console.error('Failed to play audio', err);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>Nolo</Text>
      <Text style={styles.subtitle}>Your Gentle Voice Companion</Text>

      {recording ? (
        <TouchableOpacity onPress={stopRecording} style={styles.buttonStop}>
          <Ionicons name="stop" size={24} color="#fff" />
          <Text style={styles.buttonText}>Stop</Text>
        </TouchableOpacity>
      ) : (
        <TouchableOpacity onPress={startRecording} style={styles.buttonStart}>
          <Ionicons name="mic" size={24} color="#fff" />
          <Text style={styles.buttonText}>Talk to Nolo</Text>
        </TouchableOpacity>
      )}

      {loading && <ActivityIndicator size="large" color="#A07C68" />}

      {transcription !== '' && (
        <View style={styles.resultBox}>
          <Text style={styles.label}>You said:</Text>
          <Text>{transcription}</Text>
        </View>
      )}

      {response !== '' && (
        <View style={styles.resultBox}>
          <Text style={styles.label}>Nolo replied:</Text>
          <Text>{response}</Text>
          <Button title="Play Voice" onPress={playAudio} />
        </View>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FDF7F1',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  title: {
    fontSize: 36,
    color: '#A07C68',
    fontFamily: 'serif',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 16,
    color: '#D9BBA9',
    marginBottom: 40,
  },
  buttonStart: {
    flexDirection: 'row',
    backgroundColor: '#A07C68',
    padding: 15,
    borderRadius: 12,
    marginBottom: 20,
  },
  buttonStop: {
    flexDirection: 'row',
    backgroundColor: '#C2A179',
    padding: 15,
    borderRadius: 12,
    marginBottom: 20,
  },
  buttonText: {
    color: '#fff',
    marginLeft: 10,
  },
  resultBox: {
    backgroundColor: '#F5EBDD',
    padding: 15,
    borderRadius: 10,
    marginTop: 20,
    width: '100%',
  },
  label: {
    fontWeight: 'bold',
    color: '#A07C68',
    marginBottom: 5,
  },
});
